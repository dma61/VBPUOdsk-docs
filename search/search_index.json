{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the VB-PUO Standard Documentation","text":"<p>This is an unofficial, machine-translated version of the documentation for the data exchange standard between Asset Management (Vermogensbeheer) and Pension Administration (Pensioenuitvoering).</p> <p>Disclaimer: This translation is provided for convenience. In case of any discrepancies or conflicts between this English version and the original Dutch version, the Dutch version shall prevail. The official manual can be downloaded from sivi.org.</p> <p>This site provides functional and technical details needed for implementation. Use the navigation at the left or on the right to explore the different chapters.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Chapter 1: Introduction</li> <li>Chapter 2: Principles</li> <li>Chapter 3: SPR Processes</li> <li>Chapter 4: FPR Processes</li> <li>Chapter 5: Data Standard Setup</li> <li>Chapter 6: Functional Specifications</li> <li>Chapter 7: Technical Specifications</li> </ul>"},{"location":"#external-links","title":"External Links","text":"<ul> <li>Technical Repository (JSON Schemas)</li> <li>Official SIVI Project Page</li> </ul>"},{"location":"#feedback-or-issues-regarding-this-translation","title":"Feedback or Issues Regarding This Translation","text":"<p>If you encounter any issues, errors, or ambiguities in this translated version, please report them at: https://github.com/dma61/VBPUOdsk-docs/issues</p> <p>When reporting an issue, please include: - The translated English text as-is - The new suggested translation text - A reference to the relevant section or paragraph number</p> <p>This helps us ensure the highest possible quality of the translation and keep the documentation clear for all users.</p>"},{"location":"chapter-1-introduction/","title":"Chapter 1: Introduction","text":"<p>In this introduction, we discuss the context, purpose, and target audience of this manual. We also present (in considerable detail) the setup of the manual.</p>"},{"location":"chapter-1-introduction/#11-context","title":"1.1 Context","text":""},{"location":"chapter-1-introduction/#final-report","title":"Final Report","text":"<p>In early September 2023, the final report \"Research Results: Standard for data exchange between pension administration &amp; asset management parties\" was published. With the introduction/implementation of the Future Pensions Act (Wtp), a tighter alignment between fund assets and the collective administration of personal pension assets is necessary.</p>"},{"location":"chapter-1-introduction/#follow-up-governance","title":"Follow-up &amp; Governance","text":"<p>SIVI is translating the final report into a data standard based on AFD 2.0. The standard is owned by the Pension Federation and managed by SIVI.</p>"},{"location":"chapter-1-introduction/#12-purpose","title":"1.2 Purpose","text":"<p>This manual provides analysts and developers with a guide to implement the standard and gives stakeholders insight into its management.</p>"},{"location":"chapter-1-introduction/#13-target-audience","title":"1.3 Target Audience","text":"<p>This manual is for consultants, analysts, and developers involved in implementing the data exchange standard.</p>"},{"location":"chapter-1-introduction/#14-setup","title":"1.4 Setup","text":"<p>This section outlines the structure of the manual.</p> Chapter Content 1 IntroductionIn this introduction, we discuss the context, purpose, and target audience of this manual. We also present (in considerable detail) the setup of the manual. 2 PrinciplesIn this chapter, we discuss the most important principles for the development, setup, and governance of the standard. 3 Processes &amp; information flows \u2013 Solidarity Premium SchemeThe processes &amp; information flows are extensively described in the original report. 4 Processes &amp; information flows \u2013 Flexible Premium SchemeThe processes &amp; information flows are extensively described in the original report. 5 Approach/setup data standardIn this chapter, we explain how we arrive at the specifications of the messages and the relationship with SIVI AFS. 6 Functional specificationsThis chapter contains the functional specifications, including the Data Dictionary and message structures. 7 Technical specificationsThe technical data specifications based on AFD 2.0 are explained in this chapter. 8 AppendicesIn the appendices, you will find glossaries and other reference material."},{"location":"chapter-1-introduction/#141-attribute-name-notation","title":"1.4.1 Attribute Name Notation","text":"<p>In the descriptive texts of this manual, you will encounter a dual naming convention for data fields: <code>technicalName</code> (Functional Name)</p> <ul> <li><code>technicalName</code>: The definitive, technical attribute name according to the SIVI AFD 2.0 standard.</li> <li>(Functional Name): The original, functional name used during the design phase.</li> </ul>"},{"location":"chapter-1-introduction/#15-links","title":"1.5 Links","text":"<p>Links in this document are colored blue.</p>"},{"location":"chapter-1-introduction/#16-source-of-image-on-title-page","title":"1.6 Source of image on title page","text":"<p>https://www.flaticon.com/free-icon/data-exchange_4995192</p> &lt; Previous: Home Next: Chapter 2: Principles &gt;"},{"location":"chapter-2-principles/","title":"Chapter 2: Principles","text":"<p>This chapter discusses the most important principles for the development, setup, and governance of the standard.</p>"},{"location":"chapter-2-principles/#21-reason","title":"2.1 Reason","text":"<p>With the introduction of the Wtp, information needs will change and the frequency of exchange will increase. For the solidarity premium scheme (SPR), an entirely new data stream is required for both accumulation and payout phases. For the flexible premium scheme (FPR), the information need will largely align with current 'defined contribution' schemes.</p>"},{"location":"chapter-2-principles/#preamble-standardization-vbpuo","title":"PREAMBLE: STANDARDIZATION VBPUO","text":"<p>The purpose of standardization is seamless and efficient information exchange between all parties in the chain. The VBPUO standard is based on the following principles:</p> <ul> <li> <p>Pragmatism and flexibility   The standard is not a requirement for uniformity, but a framework for interoperability.   Chain partners can retain their own internal processes and systems.   The focus is on streamlining external communication.</p> </li> <li> <p>Interoperability as the ultimate goal   The value of the standard becomes evident in practice. The test: an organization must be able to switch smoothly to another chain partner, without significant adjustments to the data interface.</p> </li> <li> <p>Manageable degrees of freedom   Flexibility is not unlimited. For predictability and reliability, the allowed variations are explicitly defined and deliberately limited.</p> </li> <li> <p>Supported by the chain   Adjustments and variations are not one-sided. Broad support is required to prevent fragmentation and to sustainably preserve the value of the standard.</p> </li> </ul> <p>Thus, the VBPUO standard remains a shared instrument for efficiency, predictability, and future-proof cooperation within the chain.</p>"},{"location":"chapter-2-principles/#22-out-of-scope","title":"2.2 Out of Scope","text":"<p>The following aspects are out of scope:</p> <ul> <li>Contractual agreements regarding the overall asset management process.</li> <li>Existing processes that do not fundamentally change, such as reconciliation between the fiduciary manager and the investment administrator.</li> <li>Information used by only one party in the chain.</li> <li>Policy documents like strategic investment plans.</li> <li>Information on costs: It is expected that existing processes for compiling the DNB annual statement J402 will continue to form the basis for this.</li> <li>\"Lookthrough\" information: Ad hoc requests for details on underlying investments are not part of regular exchange.</li> <li>Specifics for insurer-based premium-benefit agreements.</li> <li>Periodicity of the exchange: This is flexible and agreed upon by the parties.</li> <li>Task/Role division: The governance model is not prescribed by the standard.</li> </ul>"},{"location":"chapter-2-principles/#23-principles-of-data-exchange","title":"2.3 Principles of Data Exchange","text":"<ul> <li>The data standard is usable for any governance model.</li> <li>An independent investment administrator receives the same information as the fiduciary manager to ensure independent reporting.</li> <li>The fiduciary manager receives the necessary information to invest collective assets according to the investment policy.</li> <li>The pension administration organization provides participants with insight into their pension assets.</li> <li>Parties receive their data directly from the sending party.</li> <li>Once-accepted messages are not unilaterally corrected. If a sender discovers an error, coordination with the recipient is mandatory before sending a corrected message.</li> </ul>"},{"location":"chapter-2-principles/#24-clarification-of-principles","title":"2.4 Clarification of Principles","text":"<ul> <li>Data Model: Contains only the data necessary for the exchange.</li> <li>Roles (not prescriptive): The roles described are illustrative; parties can combine or separate functions.</li> <li>Periodicity: The mentioned monthly frequency is an example, not a requirement.</li> <li>Language: The report is in Dutch, but variable names in the standard are in English for international understanding.</li> </ul>"},{"location":"chapter-2-principles/#25-28-technology-governance-and-transport","title":"2.5 - 2.8 Technology, Governance, and Transport","text":""},{"location":"chapter-2-principles/#technology","title":"Technology","text":"<p>The technical implementation uses RESTful Web services and JSON, conforming to AFD 2.0. Message processing is asynchronous. Security is handled via mutual-TLS and digital signatures.</p>"},{"location":"chapter-2-principles/#handling-large-messages-chunking","title":"Handling Large Messages (Chunking)","text":"<p>For messages over ~4 MB, a \"chunking\" mechanism is provided to split them into smaller, valid JSON parts, which are reassembled by the recipient.</p>"},{"location":"chapter-2-principles/#transport","title":"Transport","text":"<p>The standard supports a RESTful API/webservice. Other solutions are considered bilateral and are not supported.</p>"},{"location":"chapter-2-principles/#governance-and-releases","title":"Governance and Releases","text":"<p>The standard is owned by the Pension Federation and managed by SIVI. It follows an annual release cycle (prerelease in June, final in September), with continuous development on GitHub. The two preceding annual releases remain supported.</p> &lt; Previous: Chapter 1: Introduction Next: Chapter 3: SPR Processes &gt;"},{"location":"chapter-3-spr-processes/","title":"Chapter 3: Processes &amp; Information Flows \u2013 Solidarity Premium Scheme (SPR)","text":""},{"location":"chapter-3-spr-processes/#31-introduction","title":"3.1 Introduction","text":"<p>This section describes the necessary information exchange between the involved parties to robustly implement the solidarity premium scheme.</p> <p>Figure 1, which can be found in the official Dutch manual available for download at sivi.org, schematically illustrates the information exchange between the involved parties. The investment administrator provides the pension administration organization with information independently of the fiduciary manager and can also perform a reviewing role. If this is not chosen and the fiduciary also conducts the leading investment administration, information flow 2 will run from the fiduciary manager to the pension administration organization.</p> <p>Legend (information flows/messages):</p> <ul> <li>1a - Assets per cohort</li> <li>1b - Cash flow (contributions and withdrawals)</li> <li>1c - Pension projections / projected cash flows</li> <li>2 - Returns and assets</li> </ul> <p>The roles of the various parties in the scheme are further explained below:</p> <ul> <li>The Pension Administration Organization (PUO) is responsible for allocating returns to participants' personal pension assets (possibly via a collective payout phase), the solidarity reserve, any compensation deposit, and other possible reserves, in accordance with the allocation rules set by the pension administrator. Based on these personal pension assets, benefits are determined and projected in line with the pension administrator's principles. The pension assets and projected benefits are delivered per cohort to the fiduciary manager and/or the investment administrator. The PUO processes premiums, benefits, and changes in the participant base and handles participant communication.</li> <li>The Fiduciary Manager supports the pension administrator in establishing the integrated investment policy, ensures its execution, and directs the operational asset managers. The fiduciary manager will also maintain a (shadow) investment administration. For large pension administrators without a fiduciary manager, the pension administrator itself is responsible for directing both internal and external asset managers.</li> <li>The Operational Asset Managers manage parts of the portfolio and are directed by the fiduciary manager. It is possible that (for certain parts) the fiduciary manager and the operational asset manager belong to the same organization.</li> <li>The Investment Administrator/Asset Service Provider (usually an additional service from the custodian) provides independent investment administration for the pension administrator. The investment administrator calculates the total return on investments and (if necessary) the return on various investment (sub)portfolios, delivering this to the PUO. As mentioned above, the fiduciary manager can also conduct the leading investment administration. The investment administration is fed by the settlement of mutations in the portfolio, executed by the operational asset managers. This administration is reconciled with the fiduciary manager if desired. The investment administrator is also often responsible for preparing regulatory reports or parts thereof.</li> </ul>"},{"location":"chapter-3-spr-processes/#32-spr-information-flows","title":"3.2 SPR Information Flows","text":"<p>The information flows for SPR products between the fiduciary manager, the investment administrator, and the pension administration organization are:</p> <ul> <li>Information from the PUO about assets, cash inflow and outflow, and projected cash flows to be hedged (optionally per cohort) to enable the fiduciary manager and investment administrator to fulfill their roles.</li> <li>Information from the investment administrator or fiduciary manager about returns that the pension administrator needs to correctly allocate to participants.</li> </ul> <p>The information flow from the PUO to the fiduciary/investment administrator (stream 1) is divided into three messages: 1a (assets), 1b (inflow and outflow), and 1c (projected benefits). Value and return information is sent to the PUO via message 4 (Return Information).</p> <p>These messages are further detailed below.</p>"},{"location":"chapter-3-spr-processes/#321-message-1-assets-1a","title":"3.2.1 Message 1. Assets (1a)","text":"<p>Note: For readability, this manual temporarily uses a dual naming convention for attributes. See section 1.4.1 for an explanation of the notation.</p> <p>On a periodic (expected to be monthly) basis, the fiduciary manager receives for a pension administrator (identified by <code>puvCode</code> (Pensionfund ID)), per scheme (identified by <code>refKey</code> (Pension scheme ID i)), the total pension assets (<code>startAmount</code> (Capital i)) at the beginning of the period (<code>startDate</code> (Capital date i)).</p> <p>In addition to the total level information, the fiduciary can also receive the pension assets (<code>startAmount</code> (Cohort capital i,k)) per (age) cohort (identified by <code>refKey</code> (Cohort ID i,k)). For example, for the 25-29 age cohort, the total of the personal pension assets at the start can be received.</p> <p>With the cohort information, the fiduciary manager can, if desired, make a total calculation and check the alignment with the information provided at the total/collective level against the fund's policy. This is useful for a robust transfer and audit trail, depending on the agreements made between parties. In case of (large) deviations, rebalancing may be desirable according to the pension administrator's policy. This information can also be provided to the investment administrator/asset service provider to enable them to perform review and reporting activities using the leading investment administration.</p> <p>Allocation to Portfolios In addition to the total assets, the Pension Administration Organization (PUO) can also communicate the desired allocation of these assets across different portfolios to the asset manager in this message. This provides the asset manager with important control information to act in accordance with the standard portfolio used by the PUO. This allocation information can be provided at both the total level (under the pension scheme) and the cohort level. These are optional fields that can specify the exposure to, for example, a return or protection portfolio, both as an absolute amount (<code>startExposureAmount</code>) and as a percentage (<code>startExposurePercentage</code>). While the total level is particularly important for control, the cohort-level information can be useful for reporting purposes.</p> <p>For the functional elaboration into a message, see chapter 6, specifically Message Structure 1. Assets (0001a). The current message structure can be found on GitHub under \"Wiki/Berichtenoverzicht\".</p>"},{"location":"chapter-3-spr-processes/#322-message-2-cashflow-1b-inflow-and-outflow","title":"3.2.2 Message 2. Cashflow (1b, inflow and outflow)","text":"<p>On a periodic (expected to be monthly) basis, the fiduciary manager receives for a pension administrator (<code>puvCode</code> (Pensionfund ID)), per scheme (<code>refKey</code> (Pension scheme ID i)), the inflow (<code>contributionAmount</code> (Contribution i)) during the period (on the <code>contributionDate</code> (Contribution date i)) and the outflow or net cash flow (<code>netAmount</code> (Net contribution/withdrawal i)) during the period (on the <code>netDate</code> (Net contribution/withdrawal date i)).</p> <p>In addition to the total level information, the fiduciary can also receive the inflow (<code>contributionAmount</code> (Cohort contribution i,k)) and outflow (<code>withdrawalAmount</code> (Cohort withdrawal i,k)) or the net cash flow (<code>netAmount</code> (Net contribution/withdrawal i,k)) per (age) cohort (<code>refKey</code> (Cohort ID i,k)) over the period (<code>Start date PUO admin</code> to <code>End date PUO admin</code>).</p> <p>The inflow and outflow include not only premiums, value transfers, and benefits, but also shifts between cohorts if applicable. A cohort can also be a birth year. An example is the personal pension assets of participants moving from the 25-29 age cohort to the 30-34 age cohort. The 'cohort' solidarity reserve, the 'cohort' compensation deposit, and possibly other reserves will also be involved.</p> <p>Applications of the Cashflow Message The standard offers the flexibility to use this message for two different purposes, which can coexist in practice:</p> <ol> <li> <p>Prospective Application (Forward-looking):</p> <ul> <li>Purpose: Liquidity management. An estimate of the expected net cash flow for the upcoming period is provided. The net amount (<code>netAmount</code>) serves as input for the actual monthly (de)allocation payment between the PUO and the asset manager.</li> <li>Characteristics: Typically a net amount at the total scheme level.</li> </ul> </li> <li> <p>Retrospective Application (Backward-looking):</p> <ul> <li>Purpose: Analysis and accountability. The actual realized cash flows from a closed period are reported. This information is separate from the monthly allocation payment.</li> <li>Characteristics: The cash flow can be provided as a net amount (<code>netAmount</code>) or split (<code>contributionAmount</code> / <code>withdrawalAmount</code>). This variant is suitable for providing details at the cohort level.</li> </ul> </li> </ol> <p>The fiduciary manager is responsible for investing the inflow or freeing up funds to finance the outflow. The calculation method for the inflow or outflow amount depends on the preference of the pension administrator and the working method of the PUO. Investments can never be made retroactively. For the audit trail, it may be desirable to record the period in the information exchange.</p> <p>For the functional elaboration into a message, see chapter 6, specifically Message Structure 2. Cashflow (0001b).</p>"},{"location":"chapter-3-spr-processes/#323-message-3-pension-projection-1c-projected-benefits","title":"3.2.3 Message 3. Pension Projection (1c, projected benefits)","text":"<p>On a periodic (expected to be monthly) basis (<code>projectionDate</code> (Projection date)), the fiduciary manager receives from a pension administrator (<code>puvCode</code> (Pensionfund ID)), per scheme (<code>refKey</code> (Pension scheme ID i)) and per (age) cohort (<code>refKey</code> (Cohort ID i,j)), the projected benefits (<code>amount</code> (Cohort expected pension payment i,j,k)) based on the accumulated assets for future periods (<code>expectedPensionPaymentDate</code> (Expected pension payment date i,k)).</p> <p>For example, for the 25-29 age cohort, this mainly concerns the projected retirement pension in 39 years (assuming the statutory retirement age). This information is important for the fiduciary manager to set up the protection portfolio and generate the intended protection returns. The desired protection per age cohort is decisive for the interest rate sensitivity to be hedged. A projection based on the entire population is no longer sufficient because the interest rate risk is no longer shared by the entire participant population.</p> <p>Finally, the data exchange includes the cash flows to be hedged per scheme (<code>hedgedExpectedPensionPaymentAmount</code> (Hedged expected pension payment i,k)) per future period. This is equal to the sum of the weighted projected benefits per cohort. The weighting factor is the protection percentage per cohort. This creates a profile of the cash flows to be hedged and avoids misunderstandings.</p> <p>For the functional elaboration into a message, see chapter 6, specifically Message Structure 3. Pension Projection (0001c).</p>"},{"location":"chapter-3-spr-processes/#324-message-4-return-information-2-information-need-of-the-puo","title":"3.2.4 Message 4. Return Information (2, Information need of the PUO)","text":"<p>This is the information flow from the investment administrator/asset service provider to the PUO (stream 2 from Figure 1) in the SPR.</p> <p>Periodically, the PUO receives for a period (from <code>startDate</code> to <code>endDate</code>) for a pension administrator (<code>puvCode</code>), per scheme (<code>refKey</code>), and per portfolio (<code>refKey</code>), the start value (<code>startAmount</code>), end value (<code>endAmount</code>), and the return (<code>returnPercentage</code>). The PUO is responsible for allocating these returns to participants. Optionally, assets and returns per cohort can also be shared with the PUO, depending on the agreed roles and responsibilities.</p> <p>The investment administrator/asset service provider provides the necessary information based on the independent investment administration. In an alternative governance model, the fiduciary manager can provide this information.</p> <p>If the SPR is designed with indirect (theoretical) protection returns, information on the total return is generally sufficient. The PUO can calculate the excess return to be allocated based on the total return minus the allocated theoretical protection return.</p> <p>If the SPR bases the protection return on the direct (actual) achieved return, the PUO must have a breakdown of the achieved return. The investment administrator must then provide the return for sub-portfolios, at least distinguishing between the protection portfolio and the excess return portfolio.</p> <p>_For the functional elaboration into a message, see chapter 6, specifically Message Structure 4. Return Information (00002). A graphical overview of the message structure can be found on GitHub, but the JSON schemas and this manual are leading.</p> &lt; Previous: Chapter 2: Principles Next: Chapter 4: FPR Processes &gt;"},{"location":"chapter-4-fpr-processes/","title":"Chapter 4: Processes &amp; Information Flows \u2013 Flexible Premium Scheme (FPR) &amp; Feedback message (SPR and FPR)","text":""},{"location":"chapter-4-fpr-processes/#41-introduction","title":"4.1 Introduction","text":"<p>This chapter describes the information exchange for the Flexible Premium Scheme (FPR), distinguishing between a direct order model and a more extensive, layered order model.</p>"},{"location":"chapter-4-fpr-processes/#42-model-1-simpler-direct-order-model","title":"4.2 Model 1: Simpler, Direct Order Model","text":"<p>Figure 2, showing a schematic of the direct order model, can be found in the official Dutch manual.</p> <p>In this model, the pension administration organization translates mutations at the participant level into the necessary (netted) transactions in the investment funds of operational asset managers and has them executed via a trading platform. Such a setup can also be implemented jointly with the asset service provider/custodian, where the pension administration organization translates participant-level mutations into netted mutations, and the asset service provider/custodian handles the execution of transactions in investment funds via a trading platform (see Figure 6 - Model 1b in the original manual). When compiling the orders, aspects such as the minimum order size per investment product, the settlement cycle, and the associated financial flows are taken into account.</p> <p>In the direct order model, the pension administrator is generally supported by the fiduciary manager with regard to the design of the lifecycle(s) and their composition (selection and monitoring of underlying investments). Special attention should be paid to the process of changing the composition of the investments (replacement of investment funds). Such changes result in transition activities for the pension administrator and/or asset service provider/custodian. More specifically, if an investment product (which could be an investment fund, a virtual pool, or a mandate) is replaced, removed, or added, the pension administration organization will adjust and process this. If adjustments are made within an investment product, this is not relevant to the pension administration organization and only affects the provider of the product.</p> <p>In the direct order model, a cohort pool consists of a group of participants who have the same investment allocation based on the lifecycle principle (less investment and interest rate risk as the retirement date/end of the investment horizon approaches). A cohort pool can be used to distinguish between groups of participants. This can be based on time (age, period until retirement, etc.) but also on a characteristic such as active, deferred, disabled, etc. The number of pools is basically unlimited; as many pools are created as are needed to distinguish the right participant groups that require their own investment mix. The administration of the cohort pool is optional and can be managed by the pension administration organization, the investment administrator/asset service provider, or elsewhere. The allocation of weights (percentages) is often determined by the fiduciary manager. A cohort pool is an administrative grouping of a group of participants who, for example, have the same investment allocation based on the lifecycle principle.</p> <p>Figure 3, showing an example of cohort pools and lifecycles, can be found in the official Dutch manual.</p> <p>The example in Figure 3 illustrates how birth years and thus ages can influence the allocation of investments within lifecycles.</p> <p>When a participant ages by one year, an age-based rebalance is performed. Each participant is placed in the next cohort pool, and their investment mix is adjusted to that of the new cohort. In the example above (Figure 3), regardless of the chosen risk profile, the share of equities is reduced and the share of bonds is increased. This leads to concrete buy and sell orders to the product providers.</p> <p>Another form of rebalancing is target-weight rebalancing. This can be performed when the actual allocation of investments falls outside pre-established bandwidths due to market movements. This form of rebalancing also leads to buy and sell orders.</p> <p>A group (cohort) of participants can be composed in various ways. Generally, three aspects play a role:</p> <ul> <li>Age (or period to retirement, birth year/month).</li> <li>Status (e.g., accumulating vs. decumulating, active/deferred/disabled).</li> <li>Investment profile.</li> </ul> <p>Netting of investments takes place across the cohort pools according to the instructions for the investment transactions. In the direct order model, this happens \"in the spaghetti\" (see Figure 2) between the cohort pools and the investments. The risk-sharing reserve is considered a separate cohort pool that invests in investment products according to its own investment policy.</p>"},{"location":"chapter-4-fpr-processes/#43-model-2-more-extensive-layered-order-model","title":"4.3 Model 2: More Extensive, Layered Order Model","text":"<p>In the \"More extensive, layered model,\" investments can also consist of non-daily tradable and/or non-platform-tradable (illiquid) funds or investment mandates. This model is already applied for larger Collective Individual DC (CIDC) schemes.</p> <p>Figure 4, showing a schematic of the layered order model, can be found in the official Dutch manual.</p> <p>In this model: *   Participants invest in cohort pools according to the chosen lifecycle. These cohort pools, in turn, invest in investment pools. The investment pools can consist of various underlying investments (liquid, illiquid, funds, and mandates). To make the allocation to participants robust and traceable, units are issued and unit values are calculated for the various (layered) pools. The participant's assets can thus be traced exactly to the pro-rata share of the underlying investments. The layer with cohort pools is optional; if this layer is absent, the pension administration organization must administer which participations in the various investment pools are held per participant.</p> <ul> <li> <p>The allocation of returns can be done by the pension administration organization or the administrator of the cohort and investment pools.</p> <ul> <li>The pension administration organization is responsible for explicitly allocating returns to personal pension assets, the risk-sharing reserve, etc., based on established rules.</li> <li>The administrator of the cohort and investment pools processes the allocation and administration of cohort pools as provided by the PUO. This role can be performed by the PUO, the investment administrator, or another specialized party. The participation values and the number of participations of the cohort pools form the basis for the PUO to explicitly allocate assets to participants.</li> </ul> </li> <li> <p>There can be a dual cohort administration. The first is with the PUO (participant &amp; cohort administration). The second is with \"an administrator,\" which handles the relationship between the cohort pools and the investment pools. This second administration can be called a middle-office administration and is optional.</p> </li> <li> <p>The Fiduciary Manager supports the pension administrator in establishing the integrated investment policy and directs the operational asset managers.</p> </li> <li> <p>The Investment Administrator/Asset Service Provider (often a service from the custodian) handles the independent investment administration of the investment pools for the pension administrator.</p> </li> </ul> <p>In the process for \"Model 2,\" a distinction is made between an accumulation phase and a payout phase. The payout phase executed by a pension administration organization is in-scope. In the payout phase, participants can choose between continuing to invest (with a variable pension benefit) or a fixed pension benefit.</p> <p>For an individual payout phase, the data exchange can be set up similarly to the accumulation phase. For a collective payout phase (all retirees in one cohort), aligning the interest rate sensitivity of the investments with the collective projected benefits is important. It is possible for the accumulation phase to occur in model 1 and the payout phase in model 2. For the payout phase (executed by a PUO), the fiduciary manager will set up a matching portfolio. The necessary data exchange will be structured in accordance with data exchange 1b from the SPR.</p>"},{"location":"chapter-4-fpr-processes/#44-information-flows-fpr-model-1-1a-and-1b","title":"4.4 Information Flows FPR - Model 1 (1a and 1b)","text":"<p>The information exchange for model 1 can be split into a variant 1a, where the pension administration organization invests directly, and a variant 1b, where the PUO invests via an order platform. Strictly speaking, from the PUO's perspective, there is no distinction between these variants, but for clarity, both are explained separately. This is schematically and simplified shown in Figures 5 and 6. For example, a PUO could trade ETFs on behalf of the pension fund via a broker if these are part of the agreed investment mix.</p> <p>Figure 5 - Model 1a, where the PUO invests directly with various market parties, can be found in the official Dutch manual.</p> <p>The data exchange, indicated as \"scope\" in Figure 5, takes place between the PUO on one side and the various types of market parties on the other.</p> <p>Figure 6 - Model 1b, where the PUO gives investment orders to an intermediary (order platform: custodian, fiduciary), can be found in the official Dutch manual.</p> <p>The data exchange (\"scope\") from Figure 6 occurs exclusively between the PUO and the order platform. The data exchange for FPR model 1 (a and b) proceeds via the following 2 messages.</p>"},{"location":"chapter-4-fpr-processes/#441-message-5-order-instruction-00541","title":"4.4.1 Message 5. Order Instruction (00541)","text":"<p>Information flow from Pension Administration Organization to Brokers/Transfer Agents/Order Desks (model 1a and 1b)</p> <p>This information flow from the PUO to Brokers/Transfer Agents/Order Desks contains the minimum set of data required to send an order to an order processing party. A switch can also be executed with this message. The PUO submits orders at the level of the investment fund. The provider of the fund executes the ordering in the underlying investments itself. This can include listed and illiquid investments, among others.</p> <p>For the functional elaboration into a message, see chapter 6, specifically section 6.4.6.</p>"},{"location":"chapter-4-fpr-processes/#442-message-6-order-confirmation-00542","title":"4.4.2 Message 6. Order Confirmation (00542)","text":"<p>Information flow from Brokers/Transfer Agents/Order Desks to Pension Administration Organization (model 1a and 1b)</p> <p>The confirmation data of the order is returned from the order processing party to the pension administration organization.</p>"},{"location":"chapter-4-fpr-processes/#45-information-flows-fpr-model-2","title":"4.5 Information Flows FPR - Model 2","text":"<p>The information exchange for model 2 (more extensive, layered order model) can be schematically simplified as follows.</p> <p>Figure 7, showing a schematic of the layered order investment process, can be found in the official Dutch manual.</p> <p>The scope outlined in Figure 7 leads to the exchange of various information flows. The standardized data exchanges that fall within the scope are indicated by red arrows in the process flow figures below. The data needed for these different information flows/processes is described in the following paragraphs. Note: The time indications in the figures below are indicative and can be filled in differently by each pension administrator. This document only covers the information flows.</p> <p>The information flow of model 2 has several steps \u2013 see the (step) numbers below in two process flow diagrams (Figures 8 and 9).</p> <p>Figure 8 (Process flow &amp; data exchange FPR 1) and Figure 9 (Process flow &amp; data exchange FPR 2) can be found in the official Dutch manual.</p> <p>Explanation of Figure 8: Process flow &amp; data exchange FPR (1) - standard The process shown assumes one administrator for both cohort pools and investment pools. This administrator links the received aggregated data about participants (via cohort pools) to the investments (via investment pools). In step 5 to 10, the PUO provides the mutations in the number of participations per cohort to the cohort pool administrator. This administrator determines the preliminary participation value based on the reconciled administration of the investment pools (step 8). By combining the supplied mutations with the preliminary participation value and rebalancing rules, the necessary transactions in investment pools can be calculated. These transactions are combined for all cohorts, resulting in one instruction in euros per investment pool to the fiduciary manager, who executes the transactions (step 11). These transactions flow via SWIFT to the investment administrator/asset service provider (step 15). The investment pool administrator calculates the final unit values for the investment pools (step 16), which forms the basis for calculating the participation value for cohort pools (step 17). These are shared with the PUO (step 18) so that the value for individual participants can be determined.</p> <p>Several variations on this process are possible, depending on how the roles of cohort pool administrator and investment pool administrator are assigned (e.g., to the PUO or the investment administrator/asset service provider). These variations may require additional information exchanges.</p> <p>Explanation of Figure 9: Process flow &amp; data exchange FPR (2) This process also assumes an administrator of cohort and investment pools. If the PUO fulfills the role of cohort pool administrator, several steps will shift to the PUO.</p>"},{"location":"chapter-4-fpr-processes/#451-message-7-balance-adjustments-00551","title":"4.5.1 Message 7. Balance Adjustments (00551)","text":"<p>Information flow from PUO to the administrator of cohort and investment pools in the FPR (5 -&gt;10 in the diagram) on T-4:</p> <p>The first (expected monthly) information flow from the PUO to the administrator of cohort and investment pools concerns netted mutations (purchase, sale, and switches) at the total level per cohort pool. With this, the administrator can calculate the inflow or outflow for investment pools and instruct the fiduciary manager accordingly. The specific fields used are detailed in the message specifications.</p> <p>For the functional elaboration into a message, see chapter 6, specifically section 6.4.8.</p>"},{"location":"chapter-4-fpr-processes/#452-messages-for-reconciliation-information","title":"4.5.2 Messages for reconciliation information","text":"<p>Information flow between the administrator, Fiduciary manager, and investment administrator (6 -&gt; 7 -&gt; 8 in the diagram) on T-4:</p> <p>The administrator of cohort and investment pools monthly receives the positions from the leading administration of the investment administrator for the investment pools. This can be supplemented with data from the fiduciary manager's (shadow) administration. These positions, containing for example the market value (<code>marketValueAmount</code>) and number of units (<code>numberOfUnits</code>) per investment pool, are reconciled with the administrator's own administration.</p>"},{"location":"chapter-4-fpr-processes/#4521-message-8-reconciliation-information-00552a","title":"4.5.2.1 Message 8. Reconciliation Information (00552a)","text":"<p>This message is for the reconciliation between the administrator, fiduciary manager, and investment administrator. For the functional elaboration, see chapter 6, section 6.4.9.</p>"},{"location":"chapter-4-fpr-processes/#4522-message-9-puo-reconciliation-information-00552b","title":"4.5.2.2 Message 9. PUO Reconciliation Information (00552b)","text":"<p>This message contains the necessary information for the situation where the PUO also fulfills the role of cohort pool administrator. In this case, an additional information exchange from the investment pool administrator to the PUO about the preliminary unit values (<code>preliminaryUnitValueAmount</code>) of the investment pools is needed. For the functional elaboration, see chapter 6, section 6.4.10.</p>"},{"location":"chapter-4-fpr-processes/#453-message-10-control-information-investment-pools-00553","title":"4.5.3 Message 10. Control Information Investment Pools (00553)","text":"<p>Information flow between Administrator and Fiduciary manager (10 -&gt; 11 in the diagram) on T-4:</p> <p>The administrator of cohort and investment pools calculates the participation values and combines these with the given mutations to estimate the cash effects on the investment pools. The administrator sends these cash effects (with substantiation) to the fiduciary. For the functional elaboration, see chapter 6, section 6.4.11.</p>"},{"location":"chapter-4-fpr-processes/#454-message-11-rebalancing-information-00554-rebalancing-cohort-pools","title":"4.5.4 Message 11. Rebalancing Information (00554), Rebalancing cohort pools","text":"<p>Information flow between Administrator and Fiduciary manager (20 -&gt; 21 in the diagram) on T+3:</p> <p>The administrator rebalances the relevant age groups based on the unit values of the investment pools at time T to be invested according to the standard policy for all cohorts. The administrator sends all month-end transactions in the cohort and investment pools to the fiduciary manager. For the functional elaboration, see chapter 6, section 6.4.12.</p>"},{"location":"chapter-4-fpr-processes/#455-passing-on-values-per-investment-pool-and-per-cohort-pool","title":"4.5.5 Passing on values per investment pool and per cohort pool","text":"<p>Information flow between various parties (15 -&gt; 16 -&gt; 17 -&gt; 18 in the diagram) on T+3:</p> <p>The administrator calculates the unit value per unit in the investment pool and the participation value per participation in the cohort pool. The administrator passes the (participation) values of the cohort pools to the PUO and the fiduciary. If the PUO acts as the cohort pool administrator, it will receive the unit values of the investment pools and calculate the participation values itself.</p>"},{"location":"chapter-4-fpr-processes/#4551-message-12-value-information-cohort-pool-00555a","title":"4.5.5.1 Message 12. Value Information Cohort Pool (00555a)","text":"<p>The fiduciary receives this from the PUO (when the PUO administers cohort pools). For the functional elaboration, see chapter 6, section 6.4.13.</p>"},{"location":"chapter-4-fpr-processes/#4552-message-13-value-information-investment-pool-00555b","title":"4.5.5.2 Message 13. Value Information Investment Pool (00555b)","text":"<p>The administrator of cohort and investment pools (also) passes on the (unit) values, the administrative price, of investment pools. For the functional elaboration, see chapter 6, section 6.4.14.</p>"},{"location":"chapter-4-fpr-processes/#456-message-14-payment-information-00556","title":"4.5.6 Message 14. Payment Information (00556)","text":"<p>Information flow between Administrator and Fiduciary manager (22 -&gt; 23 in the diagram), beginning of the month, on T+5:</p> <p>The administrator sends the payment instruction for withdrawals to the fiduciary manager. For the functional elaboration, see chapter 6, section 6.4.15.</p>"},{"location":"chapter-4-fpr-processes/#46-use-of-spr-messages-in-fpr","title":"4.6 Use of SPR Messages in FPR","text":"<p>Within a Flexible Premium Arrangement (FPR), in addition to the individual unitized cash flows, there are also collective premium flows. These are cash flows that do not belong to a single specific participant, such as risk premiums, contributions to reserves, or withdrawals from a collective benefit pool.  </p> <p>The standard FPR messages (5 through 14) are purely aimed at the unitized world and do not support these collective flows. To address this, it has been agreed that parties will revert to the proven SPR messages 1, 2, 3, and/or 4 for the exchange of this information. This method applies to both the direct (Model 1) and the layered (Model 2) FPR order model.</p>"},{"location":"chapter-4-fpr-processes/#47-feedback-message-resending-fpr-and-spr","title":"4.7 Feedback Message &amp; Resending - (FPR and SPR)","text":""},{"location":"chapter-4-fpr-processes/#purpose-and-function","title":"Purpose and Function","text":"<p>When exchanging messages, it is essential for the sender to know if a message has been correctly received and processed. The feedback message is designed to provide this certainty in the following situations:</p> <ul> <li>For asynchronous processing: To provide the final status (both success and failure) of a message after background processing is complete.</li> <li>For synchronous processing: To provide immediate, detailed error information when a message cannot be accepted.</li> </ul> <p>A feedback message is therefore mandatory to specify errors. In case of successful processing, it is only sent as part of an asynchronous process. For successful synchronous processing, an HTTP 200 OK status code is sufficient.</p>"},{"location":"chapter-4-fpr-processes/#structure-of-the-feedback-message","title":"Structure of the Feedback Message","text":"<p>The feedback message has a compact, fixed structure optimized for communicating status information. The image below (also available on GitHub in the message overview and in the MessageStructureView of the message) shows the hierarchical structure and the main entities.</p> <p></p> <p>The core of the message is formed by the following components:</p> <ul> <li>commonTechnical: Contains the technical identification of the feedback message itself, such as a new, unique <code>messageId</code>.</li> <li>commonFunctional: Contains the functional metadata, including:<ul> <li><code>statusType</code>: The status of the original message: Accepted (8) or Rejected (0).</li> <li><code>originalMessageId</code>: A mandatory reference to the <code>messageId</code> of the message to which this feedback pertains.</li> <li><code>originalMessageType</code>: An optional field indicating the type of the original message, to simplify routing at the receiver.</li> </ul> </li> <li>error: An optional block that, in case of rejection, contains an <code>errorCode</code> and an <code>errorCodeExplanation</code>.</li> <li>party.pensionProvider: Identifies the pension provider to whom the original message related.</li> </ul> <p>For a detailed specification of all attributes and code lists, see sections 6.5 and 6.4.16.</p>"},{"location":"chapter-4-fpr-processes/#interaction-patterns-and-process-flow","title":"Interaction Patterns and Process Flow","text":"<p>The technical handling of the feedback is defined in the OpenAPI Specification (OAS) and follows six fixed scenarios. These describe both synchronous and asynchronous processing, including the handling of errors and \"panic\" situations where the feedback loop itself fails.</p> <p>A visual overview of these scenarios can be found on GitHub:</p> <p></p> <p>The scenarios are explained functionally below:</p> <ol> <li>Synchronous validation - Success: Immediate 200 OK.</li> <li>Synchronous validation - Error: Immediate 400 Bad Request with a feedback message in the body.</li> <li>Asynchronous validation - Success: First a 202 Accepted, later followed by a callback with an \"Accepted\" feedback message.</li> <li>Asynchronous validation - Error: First a 202 Accepted, later followed by a callback with a \"Rejected\" feedback message.</li> <li>Panic scenario (after Error): The callback with a \"Rejected\" feedback is not accepted by the recipient (400 Bad Request).</li> <li>Panic scenario (after Success): The callback with an \"Accepted\" feedback is not accepted by the recipient (400 Bad Request).</li> </ol> <p>In panic scenarios (5 and 6), manual coordination via another channel is necessary.</p>"},{"location":"chapter-4-fpr-processes/#protocol-for-corrections-and-resending","title":"Protocol for Corrections and Resending","text":"<p>The feedback mechanism dictates the protocol for correcting messages. This protocol is based on the fundamental principle:</p> <p>\"Once accepted messages are not unilaterally corrected.\"</p> <p>The received feedback message is the primary form of communication that determines how a correction should be handled.</p> <p>Scenario 1: Correction after an Error Message (Feedback \"Rejected\") If the receiving party has sent a feedback message with the status \"Rejected,\" this serves as the official request for correction.</p> <ul> <li>The receiving party expects a new, corrected message.</li> <li>The sending party may and must send a corrected message without further, separate coordination.</li> </ul> <p>Scenario 2: Correction after Acceptance of a message This scenario occurs when a message has been successfully accepted (via a 200 OK), and the sending party subsequently discovers an error. Since there is no official trigger for a correction, unilaterally sending a new version of the message (a correction message) is not permitted.</p> <p>In such situations, the sending party must contact the receiving party to discuss the situation. The outcome of this consultation determines the follow-up action. Possible solutions are:</p> <ul> <li>Ad hoc agreement for resubmission.</li> <li>Correction in the next regular delivery.</li> <li>Following an agreed-upon incident procedure.</li> </ul> &lt; Previous: Chapter 3: SPR Processes Next: Chapter 5: Data Standard Setup &gt;"},{"location":"chapter-5-data-standard-setup/","title":"Chapter 5: Approach/Setup of the Data Standard","text":"<p>This chapter explains how the message specifications are derived. The steps to arrive at the functional specifications are:</p> <ol> <li>Create descriptions of the processes and information flows.</li> <li>Create a list of entities and associated attributes.</li> <li>Determine the basic structure of the messages.</li> <li>Indicate which messages are needed.</li> <li>Create a cross-reference table between the basic structure and the messages.</li> </ol>"},{"location":"chapter-5-data-standard-setup/#51-55-the-process","title":"5.1-5.5 The Process","text":"<p>The process starts with describing the business processes (as done in Chapters 3 and 4). From these descriptions, the required data elements (entities and attributes) are identified. These are then organized into a hierarchical base structure. Specific messages are defined as subsets of this base structure. A cross-reference table (see section 6.5) shows which attributes are used in which message.</p>"},{"location":"chapter-5-data-standard-setup/#56-relationship-with-sivi-afs","title":"5.6 Relationship with SIVI AFS","text":"<p>This standard is built using components from the SIVI All Finance Standard (AFD 2.0). AFD 2.0 is an English-language standard that provides building blocks (entities, attributes, code lists) for the financial sector. Where necessary, this standard proposes new elements to be added to AFD 2.0. The use of JSON is a core principle of AFD 2.0.</p> &lt; Previous: Chapter 4: FPR Processes Next: Chapter 6: Functional Specifications &gt;"},{"location":"chapter-6-functional-specs/","title":"Chapter 6: Functional Specifications","text":"<p>This chapter contains the detailed functional specifications.</p> <p>This chapter contains the functional specifications:</p> <ul> <li>Data Dictionary</li> <li>Base Message</li> <li>Cross-reference: Base Message &amp; Messages</li> </ul>"},{"location":"chapter-6-functional-specs/#61-data-dictionary","title":"6.1 Data Dictionary","text":"<p>An overview of all entities and their purpose. This section will link to detailed pages or files for each entity.</p> Entity.entitytype commonTechnical.default party.sender party.contact party.receiver commonFunctional.default party.pensionProvider pension.scheme financialInformation.reportingPeriod financialTransaction.payment party.creditor financialTransaction.cashflow financialTransaction.expectedPayment pension.cohort pension.cohortPool investment.pool investment.portfolio investment.investmentDetails financialTransaction.trade error.default document.default chunckMeta.default"},{"location":"chapter-6-functional-specs/#62-entity-types","title":"6.2 Entity Types","text":"<p>This section describes the various entities and the attributes within those entities.</p> <p>Below is an explanation of the entities. This information is derived from AFD 2.0, which can be consulted via this link.</p> <p>Note: The entity type is mandatory.</p> Entity.entitytype Description <code>commonTechnical.default</code> This entity contains technical details about sending and storing messages. It forms the basis for the technical aspects within the messaging system. <code>party.sender</code> The \"party.sender\" entity refers to the sender of the message. <code>party.contact</code> The \"party.contact\" entity represents a contact person within a legal entity. <code>party.receiver</code> This entity represents the recipient of the message. <code>commonFunctional.default</code> This entity contains domain-specific information about the content of the message. <code>party.pensionProvider</code> This entity represents a pension provider (pension fund, insurer, or PPI). <code>pension.scheme</code> This entity contains data at the level of the pension scheme or plan. <code>financialInformation.reportingPeriod</code> This entity relates to reporting periods, time intervals, and other generic dates. <code>financialTransaction.payment</code> This entity/entity type combination contains data about a payment. <code>party.creditor</code> This entity represents the creditor; the recipient of the payments. <code>financialTransaction.cashflow</code> This entity deals with financial transactions related to pensions, specifically focusing on cash flows. <code>financialTransaction.expectedPayment</code> This entity contains information about projected future cash flows/payments. <code>pension.cohort</code> This entity contains information about specific target groups (cohorts) within the pension scheme. <code>pension.cohortPool</code> The pooled combination of investment pools for a cohort. Investments in a cohort pool are made for a group of participants with a similar investment allocation. <code>investment.pool</code> This entity (investment pool) represents collections of underlying investments (liquid, illiquid, funds, mandates). <code>investment.portfolio</code> This entity relates to investment portfolios, which represent the total managed assets (or a sub-portfolio). <code>investment.investmentDetails</code> This entity describes individual investments of a pension provider. <code>financialTransaction.trade</code> This entity relates to trading activities within the pension scheme. <code>error.default</code> In case of errors, this entity is used to generate error messages. <code>document.default</code> This entity is intended for adding any attachments to messages. <code>chunkMeta.default</code> This entity contains metadata for splitting and merging large messages (chunking)."},{"location":"chapter-6-functional-specs/#63-attributes-in-entitiesentity-types","title":"6.3 Attributes in Entities.Entity Types","text":"<p>The tables in this section detail the attributes per entity/entity type combination. Each entry includes the attribute's name, definition, data type, max length, and a link to any code list.</p> <p>Note: Attribute descriptions in the feedback message may differ from those in the 14 content messages.</p> <p>Data type descriptions are available in the SIVI All-Finance Standard manual.</p> <p>Interpretation rules:</p> <ul> <li><code>string</code>: Max length is specified unless a code list applies (then 'length' is empty).</li> <li><code>decimal</code>: Defaults to 2 decimal places. Deviations are specified in the data type column.</li> </ul> <p>Attribute names have been aligned with AFD 2.0 conventions and differ from the consultation document. See Appendix 8.4 for the translation table.</p>"},{"location":"chapter-6-functional-specs/#commontechnicaldefault","title":"<code>commonTechnical.default</code>","text":"<p>The commonTechnical entity covers all information about sending or storing the message. This is typically technical information.</p> Attribute Name Definition Data Type Length Code List <code>messageId</code> Unique message identification string 70 <code>creationDateTime</code> Creation date and time timestamp <code>testMessage</code> Test message indicator boolean"},{"location":"chapter-6-functional-specs/#partysender","title":"<code>party.sender</code>","text":"<p>Sender of the message.</p> Attribute Name Definition Data Type Length Code List <code>refKey</code> Unique reference key assigned to an entity. string 70 <code>rsinNumber</code> Governmental identification number for legal entities (RSIN). string 9 <code>organizationName</code> Organization name of the sender. string 60 <code>applicationSenderName</code> Name of the application that created the message. string 60"},{"location":"chapter-6-functional-specs/#partycontact","title":"<code>party.contact</code>","text":"<p>A natural person who can be contacted within a legal entity for further information.</p> Attribute Name Definition Data Type Length Code List <code>emailWork</code> Work email address string 60 <code>workPhoneNumber</code> Work phone number string 60"},{"location":"chapter-6-functional-specs/#partyreceiver","title":"<code>party.receiver</code>","text":"<p>Receiver of the message.</p> Attribute Name Definition Data Type Length Code List <code>refKey</code> Unique reference key assigned to an entity. string 70 <code>rsinNumber</code> Governmental identification number for legal entities (RSIN). string 9 <code>organizationName</code> Name of the recipient organization(s). string 60"},{"location":"chapter-6-functional-specs/#commonfunctionaldefault","title":"<code>commonFunctional.default</code>","text":"<p>The commonFunctional entity covers all information about the content of the message. This is typically domain-specific information.</p> Attribute Name Definition Data Type Length Code List <code>function</code> Message function code. string ADNFUN <code>statusType</code> Status of the original message processing (Accepted or Rejected). string ADNSTS <code>afdDefinitionName</code> Type of message, name of the message. string 80 <code>afdDefinitionVersion</code> Version of the <code>afdDefinition</code> of the message. See section 7.5.1 for details. string 80 <code>originalMessageId</code> The original <code>messageId</code> of the message being replaced or being responded to. string 70 <code>originalMessageType</code> Message type of the original request to which this message is a response. E.g. <code>0001a</code>, <code>0001b</code>, etc. string"},{"location":"chapter-6-functional-specs/#partypensionprovider","title":"<code>party.pensionProvider</code>","text":"<p>Information on the Pension Provider level (Pension Fund, Insurer, PPI, APF).</p> Attribute Name Definition Data Type Length Code List <code>puvCode</code> ID of the pension provider (PUV-code). string AFDIDP <code>rsinNumber</code> Governmental identification number for legal entities (RSIN). integer 9 <code>organizationName</code> Name of the pension provider. string 60"},{"location":"chapter-6-functional-specs/#pensionscheme","title":"<code>pension.scheme</code>","text":"<p>Data on the pension scheme level.</p> Attribute Name Definition Data Type Length Code List <code>refKey</code> ID of the pension scheme. string 70 <code>pensionschemeName</code> Name of the pension scheme. string 60 <code>StartAmount</code> Total pension assets as of the start date. decimal <code>tradingPortfolioId</code> Portfolio ID of the custodian. decimal 10"},{"location":"chapter-6-functional-specs/#financialinformationreportingperiod","title":"<code>financialInformation.reportingPeriod</code>","text":"<p>Reporting period information.</p> Attribute Name Definition Data Type Length Code List <code>startDate</code> Start date of the data period or reference date. date <code>endDate</code> End date of the data period. date <code>tradeDate</code> Desired trade date. date <code>investmentOrderSettlementDate</code> Date by which the investment order cycle must be settled. date <code>mutationValuationDate</code> Date for processing mutations per age group. date <code>projectionDate</code> Date of the pension benefit projection. date <code>instructionDate</code> Date of the instruction sent by the PUO. date <code>unitValueEstimationDate</code> Date on which the preliminary unit value (investment pool) was determined. date <code>participationValuationDate</code> Pricing date of the participation value (cohort pool). date <code>positionDate</code> Date on which the positions in the investment administration were established. date <code>valueDate</code> Currency date. date"},{"location":"chapter-6-functional-specs/#financialtransactionpayment","title":"<code>financialTransaction.payment</code>","text":"<p>Information about payments.</p> Attribute Name Definition Data Type Length Code List <code>refKey</code> ID of the expected payment. string 70 <code>amount</code> Amount in currency / projected benefit. decimal <code>currencyType</code> Currency code. string ISOVAL <code>collectionAccountIban</code> IBAN of the debit account. string 10 <code>description</code> Description of the transaction (payment). string 60 <code>expectedPensionPaymentDate</code> Pension payment date. date <code>hedgedExpectedPensionPaymentAmount</code> Cash flow to be hedged. decimal"},{"location":"chapter-6-functional-specs/#partycreditor","title":"<code>party.creditor</code>","text":"<p>The party that has a claim.</p> Attribute Name Definition Data Type Length Code List <code>refKey</code> Unique reference key assigned to an entity. string 70 <code>collectionAccountIban</code> IBAN of the credit account per scheme. string 10 <code>collectionAccountInNameOf</code> Name of the counterparty per scheme. string 60 <code>collectionAccountBic</code> Business Identifier Code (BIC) per scheme. string 10 <code>collectionAccountBicCorrespondent</code> BIC correspondent per scheme. string 10"},{"location":"chapter-6-functional-specs/#financialtransactioncashflow","title":"<code>financialTransaction.cashflow</code>","text":"<p>The sum of contributions and withdrawals on all cohorts.*</p> Attribute Name Definition Data Type Length Code List <code>contributionAmount</code> Sum of contributions. decimal <code>contributionDate</code> Date of receipt of the contribution. date <code>withdrawalAmount</code> Sum of withdrawals. decimal <code>withdrawalDate</code> Date by which funds for withdrawal are available. date <code>netAmount</code> Net sum of contributions and withdrawals. decimal <code>netDate</code> Date on which the net cash flow is determined. date <p>*Note: The amount and date fields in <code>financialTransaction.cashflow</code> are optional. At least one pair must be used.</p>"},{"location":"chapter-6-functional-specs/#pensioncohort","title":"<code>pension.cohort</code>","text":"<p>Information on cohort (pension target audience) level.</p> Attribute Name Definition Data Type Length Code List <code>refKey</code> ID of the cohort. string 70 <code>description</code> Description of the cohort. string 60 <code>participationStatus</code> Status of the participants in a cohort. string ADNDNS <code>startAge</code> Start age in months. integer <code>endAge</code> End age in months. integer <code>reserveIndicator</code> Indicates if the cohort represents a reserve. boolean <code>reserveType</code> Type of reserve. string AFDRES <code>reserveDescription</code> Description for \"Other\" reserve type. string 60 <code>startAmount</code> Pension assets of the cohort at the start date. decimal <code>netAmount</code> Net sum of contributions and withdrawals per cohort. decimal <code>contributionAmount</code> Inflow to be invested by the fiduciary manager. decimal <code>withdrawalAmount</code> Outflow to be invested by the fiduciary manager. decimal <code>protectionReturnPercentage</code> Achieved protection return as a percentage. Decimal (1E-12) <code>excessReturnPercentage</code> Achieved excess return as a percentage. Decimal (1E-12) <code>protectionReturnAmount</code> Achieved protection return in currency. decimal <code>excessReturnAmount</code> Achieved excess return in currency. decimal"},{"location":"chapter-6-functional-specs/#pensioncohortpool","title":"<code>pension.cohortPool</code>","text":"<p>The pooled combination of investments (investment pools) for a cohort.</p> Attribute Name Definition Data Type Length Code List <code>refKey</code> ID of the cohort pool. string 70 <code>cohortRef</code> Reference to the cohort this pool belongs to. string 70 <code>description</code> Description. string 60 <code>currencyType</code> Currency of the cohort data. string ISOVAL <code>inflowPremiumAmount</code> Premium contribution per cohort pool. decimal <code>inflowRebalanceAmount</code> Cash amount of rebalance transactions per cohort pool. decimal <code>numberOfNewParticipations</code> New participations to be issued in the cohort pool. decimal <code>numberOfParticipations</code> Number of outstanding units (participations). decimal <code>numberOfRebalanceParticipations</code> Rebalance participations per cohort pool. decimal <code>participationsSummedValueAmount</code> Value per cohort pool (sum of participation value). decimal"},{"location":"chapter-6-functional-specs/#investmentpool","title":"<code>investment.Pool</code>","text":"<p>Investment pool / investment portfolio.</p> Attribute Name Definition Data Type Length Code List <code>refKey</code> ID of the investment pool per scheme. string 70 <code>description</code> Description. string 60 <code>marketValueAmount</code> Market value. decimal <code>unitsSummedValueAmount</code> Value per investment pool (unit value). decimal <code>preliminaryMarketValueAmount</code> Preliminary market value of the portfolio. decimal <code>preliminaryUnitValueAmount</code> Preliminary unit value. decimal <code>numberOfUnits</code> Number of units issued for the investment pool. decimal <code>currencyType</code> Currency of the pool. string ISOVAL <code>dummyCashId</code> ID for a dummy cash instrument. string 10 <code>buySellId</code> Buy/Sell indicator. string sell; buy <code>tradeQuantity</code> Number of units to be traded. decimal <code>unitPrice</code> Unit value/price. decimal <code>currencyExchangeRate</code> FX rate. integer"},{"location":"chapter-6-functional-specs/#investmentportfolio","title":"<code>investment.portfolio</code>","text":"<p>Investment portfolio.</p> Attribute Name Definition Data Type Length Code List <code>refKey</code> ID of the Investment Portfolio. string 70 <code>description</code> Description. string 60 <code>startAmount</code> Total Market Value at the start of the period. decimal <code>netAmount</code> Net sum of contributions and withdrawals. decimal <code>endAmount</code> Total Market Value at the end of the period. decimal <code>returnPercentage</code> Achieved return as a percentage. Decimal (1E-12) <code>returnAmount</code> Achieved return in currency. decimal <code>startExposureAmount</code> Allocation of pension assets to this portfolio. decimal <code>startExposurePercentage</code> Relative share of <code>startExposureAmount</code>. decimal"},{"location":"chapter-6-functional-specs/#investmentinvestmentdetails","title":"<code>investment.investmentDetails</code>","text":"<p>An investment in either liquid or illiquid funds or pools thereof.</p> Attribute Name Definition Data Type Length Code List <code>refKey</code> Identifier (e.g., ISIN or internal code). string 70 <code>description</code> Name of the investment/fund/instrument. string 60 <code>currencyType</code> Currency of the instrument. string ISOVAL <code>numberOfUnits</code> Number of purchased units per instrument. decimal <code>numberOfHoldings</code> Number of holdings per instrument. decimal <code>localPrice</code> Price per instrument in original currency. decimal <code>localValueAmount</code> Total market value in original currency. decimal <code>Result</code> Unrealized result per instrument. decimal <code>accruedInterest</code> Accrued interest per instrument. decimal <code>poolPercentage</code> Weight in the portfolio per instrument. decimal <code>currencyExchangeRate</code> FX rate per instrument. decimal"},{"location":"chapter-6-functional-specs/#financialtransactiontrade","title":"<code>financialTransaction.trade</code>","text":"<p>Trading/ordering; Buying and selling.</p> Attribute Name Definition Data Type Length Code List <code>tradeDate</code> Desired trade date. date <code>refKey</code> Unique reference key assigned to an entity. string 70 <code>adjustmentIndicator</code> Adjusted trade instruction. boolean 1 <code>buySellId</code> Buy/Sell/Switch indicator. string 3 sell, buy, switch <code>tradeAmount</code> Amount of the purchase in the investment's currency. decimal <code>tradeQuantity</code> Number of units to be traded. decimal <code>tradePrice</code> Purchase price/rate. decimal <code>switchType</code> Type of switch; one-day or sequential. string sequential, one-day <code>financialInformationRef</code> On a switch, reference to the target identifier. string <code>Counterparty</code> Transfer Agent; the party executing the trade. string 70 <code>Broker</code> Broker executing investment orders. string 70 <code>interestAmount</code> Amount of applicable interest. decimal <code>commissionAmount</code> Fee for executing the transaction. decimal <code>clearingBroker</code> Broker responsible for settlement. string 70 <code>clearingBrokerCashAccount</code> Cash account (IBAN) at the clearing broker. string 18"},{"location":"chapter-6-functional-specs/#errordefault","title":"<code>error.default</code>","text":"<p>Error message.</p> Attribute Name Definition Data Type Length Code List <code>refKey</code> Unique reference key assigned to an entity. string 70 <code>errorCode</code> Error code type. string ADNFTM <code>errorCodeExplanation</code> Explanation of the error message. string 300 <p>See also the information about <code>error.default</code> in the SIVI All-Finance Standard.</p>"},{"location":"chapter-6-functional-specs/#documentdefault","title":"<code>document.default</code>","text":"<p>Information about an attachment/document.</p> Attribute Name Definition Data Type Length Optional <code>refKey</code> Unique reference key assigned to an entity. string 70 <code>fileName</code> Name of the file for the attachment. string 60 <code>fileExtension</code> Extension of the file (e.g., pdf, csv, txt). string 10 pdf;csv;txt"},{"location":"chapter-6-functional-specs/#chunkmetadefault","title":"<code>chunkMeta.default</code>","text":"<p>\"Chunking\" (splitting large messages) into partial messages.</p> Attribute Name Definition Data Type Length Code List <code>currentChunkId</code> Unique reference (id) of the current chunk. string 70 <code>chunkSequenceNumber</code> Sequence number of the current chunk. integer <code>totalNumberOfChunks</code> Total number of chunks the message is split into. integer <code>chunkFragmentPaths</code> Array of JMESPath references to the message fragments. array"},{"location":"chapter-6-functional-specs/#64-messages","title":"6.4 Messages","text":"<p>The data exchange described in this document is supported by a set of 14 messages, supplemented by a feedback message. The messages are derived from the base message described below.</p> <p>Below (in Figure 12) is an overview of the messages and the roles (sender/receiver) involved.</p> Message Name Type PUO FM BA ACB BR 1. Vermogen (0001a) SPR from to 2. Cashflow (0001b) SPR from to 3. Pensioenprojectie (0001c) SPR from to 4. Rendementsinformatie (00002) SPR to from 5. Orderopdracht (00541) FPR* from to 6. Orderconfirmation (00542) FPR* to from 7. Mutatiesaldi (00551) FPR** from to 8. Reconciliatie-informatie (00552a) FPR** from from to 9. PUO-reconciliatie-informatie (00552b) FPR** from to 10. Stuurinformatiebeleggingspools (00553) FPR** to from 11. Rebalancinginformatie (00554) FPR** to from 12. Waarde-informatie cohortenpool (00555a) FPR** from to from 13. Waarde-informatie beleggingspool (00555b) FPR** to to from 14. Betaalinformatie (00556) FPR** to from Feedback Message*** Both <p>Legend for the roles:</p> <ul> <li>PUO: Pension Administration Organizations</li> <li>FM: Fiduciary Managers</li> <li>BA: Investment Administrators / Asset Service Provider</li> <li>ACB: Administrators of Cohort and Investment Pools</li> <li>BR: Brokers / Transfer Agents</li> </ul> <p>Note: Each receiving party receives its information directly from the sending party.</p> <p>Note: Each receiving party/role gets its information directly from the sending party. In addition to the parties/roles mentioned in Figure 12, messages can also be sent to other parties, such as Liability-Driven Investment managers (LDIs). The transmission to unmentioned parties/roles is also direct. Received information is not forwarded to other parties.</p> <p>The table below lists the message types and their meaning. In parentheses is the reference to the working group's final report: \"Final Report Research Standard VB PUO (September 2023.pdf)\".</p> <ul> <li>PMT = <code>pensionMessageType</code> in AFD 2.0 (the descriptions of the message types are provided).</li> <li>TAG = The identifier used for the message in the API.</li> </ul> Type Message Type PMT/TAG Description SPR 1a (4.2.1.1) Capital From PUO to Fiduciary Manager &amp; Investment Administrator.On a periodic (expected monthly) basis, the fiduciary manager receives the total pension assets at the start of the period for a scheme. This can also be provided per cohort. With this information, the fiduciary manager can check alignment with the fund's policy and rebalance if necessary. SPR 1b (4.2.1.3) Cashflow From PUO to Fiduciary Manager &amp; Investment Administrator.Periodically, the fiduciary manager receives the inflow and outflow for a scheme. This can be provided at a total level and per cohort. The cash flow includes premiums, value transfers, benefits, and shifts between cohorts. SPR 1c (4.2.1.3) PensionProjection From PUO to Fiduciary Manager &amp; Investment Administrator.Periodically, the fiduciary manager receives the projected benefits per scheme and cohort based on the accrued assets. It also includes the cash flows to be hedged per scheme, calculated as the sum of weighted projected benefits per cohort. SPR 2 (4.2.2.) ReturnOnInvestment From Investment Administrator to PUO.The PUO periodically receives information about the achieved investment return, including start and end values and the return percentage per portfolio. This is necessary for the PUO to allocate returns to participants, the solidarity reserve, etc. FPR 541 (5.4.1.) Trade From PUO to Brokers/Transfer Agents/Order Desks.This message contains the minimum data set required to send an order or a switch to an order processing party. The PUO submits orders at the investment fund level. FPR 542 (5.4.2.) Orderconfirmation From Brokers/Transfer Agents/Order Desks to PUO.The confirmation details of the order are returned from the order processing party to the PUO. FPR 551 (5.5.1) BalanceAdjustments From PUO to Administrator of Cohort &amp; Investment Pools.This first monthly information flow concerns netted mutations (purchases, sales, switches) per cohort pool. The administrator uses this to calculate cash flows for the investment pools and instruct the fiduciary manager. FPR 552a (5.5.2) InvestmentDetails Between Administrator, Fiduciary Manager, and Investment Administrator.The administrator receives monthly positions from the investment administrator and reconciles them with their own administration. FPR 552b (5.5.2) InvestmentDetailsPUO From Investment Pool Administrator to PUO.Additional information needed when the PUO also acts as the cohort pool administrator. This message provides the preliminary unit values of the investment pools to the PUO. FPR 553 (5.5.3) ControlInformationInvestmentPools From Administrator to Fiduciary Manager.The administrator calculates participation values and combines them with mutations to estimate the cash effects on the investment pools. These effects are then sent to the fiduciary manager. FPR 554 (5.5.4) RebalancingDetails From Administrator to Fiduciary Manager.The administrator rebalances the relevant cohorts based on the unit values at time T and sends all month-end transactions to the fiduciary manager. FPR 555a (5.5.5) ValueAmountCohortPool From PUO to Fiduciary Manager (when PUO administers cohort pools).The administrator (or PUO, if applicable) calculates and distributes the participation values of the cohort pools. FPR 555b (5.5.5) ValueAmountInvestmentPool Between Investment Administrator, Administrator, Fiduciary Manager, and PUO.The administrator calculates the unit value per unit in the investment pool and the participation value per participation in the cohort pool and distributes them to the PUO and fiduciary. FPR 556 (5.5.6) PaymentDetailsCreditor From Administrator to Fiduciary Manager.At the beginning of the month, the administrator sends the payment instruction for withdrawals to the fiduciary manager. SPR/FPR Feedback Feedback From the recipient of a content message (1-14) to the original sender.Provides feedback on errors or confirms the processability of a message. <p>Unlike the Dutch manual, this documentation references the <code>MessageStructureView</code> folders on GitHub to illustrate the structure of each message. For example, the structure for Message 11 can be viewed here.</p> <p>Below is a diagram depicting the structure of Message 11:</p> <p></p> <p>These diagrams clearly visualize the relationships between entities. For detailed text-based specifications, please refer to the original Dutch manual.</p>"},{"location":"chapter-6-functional-specs/#65-cross-reference-attributes-messages","title":"6.5 Cross-Reference Attributes &amp; Messages","text":"<p>please refer to the original Dutch manual.</p> &lt; Previous: Chapter 5: Data Standard Setup Next: Chapter 7: Technical Specifications &gt;"},{"location":"chapter-7-tech-specs/","title":"Chapter 7: Technical Specifications","text":"<p>The technical data specifications are based on AFD 2.0 from SIVI AFS. This chapter provides an explanation.</p>"},{"location":"chapter-7-tech-specs/#71-messages-schemes","title":"7.1 Messages &amp; Schemes","text":"<p>Each message can concern multiple schemes (<code>pension.scheme</code>). However, it always pertains to a single <code>party.pensionProvider</code>. The transmission is per message, and that message thus contains 1 <code>pension.provider</code> and 1 or more <code>pension.scheme</code>'s.</p>"},{"location":"chapter-7-tech-specs/#72-validations","title":"7.2 Validations","text":"<p>The following validation rules can be implemented using the technical specifications:</p> <ul> <li>Check if the message structure is correct;</li> <li>Verify the data type (including numbers, strings);</li> <li>Check for minimum and maximum values;</li> <li>Validate the field length;</li> <li>Check for the presence of mandatory entities and attributes;</li> <li>Check the number of repetitions of entities;</li> <li>Ensure the use of allowed codes from code lists.</li> </ul> <p>N.B.: Relational checks (validation rules between different data elements) are still in development. See also the JSON schemas.</p>"},{"location":"chapter-7-tech-specs/#73-json","title":"7.3 JSON","text":"<p>The SIVI AFS team follows the specifications below for AFD 2.0 in combination with JSON (derived from Forum Standaardisatie):</p> Concern Description Full Name JavaScript Object Notation Version RFC8259, December 2017 Specification Document JSON Specification Document Managing Organization Internet Engineering Task Force (IETF) Functional Scope Object notation for exchanging data structures, for example, in web applications that retrieve data asynchronously from a web server. Typing Exchange of data structures Benefit JSON (JavaScript Object Notation) is a subset of the JavaScript programming language. The simplicity of JSON has led to its great popularity, especially as a 'light' alternative to XML. Operation JSON is a format for storing and sending data, similar to XML. It is used for exchanging data structures, particularly in web applications. The standard is aimed at efficient programming and has a compact notation. Tools Various online JSON validators and tools are available, also for different programming platforms. More information about the standard can also be found in publications from ECMA International. <p>Guideline: If a non-mandatory attribute has no value, the attribute should be completely omitted from the JSON message. This is a recommended practice according to JSON conventions.</p>"},{"location":"chapter-7-tech-specs/#74-transport-openapi","title":"7.4 Transport / OpenAPI","text":""},{"location":"chapter-7-tech-specs/#741-openapi-model","title":"7.4.1 OpenAPI Model","text":"<p>Since early 2024, work has been done on a standard for the transport of messages. A number of PUOs and asset managers, in collaboration with SIVI, have taken steps to develop an OpenAPI specification within the previously outlined technical contours. This effort aimed to support all parties that will implement the RESTful API and to promote its uniform application. The specification can be found on GitHub. The proposed OpenAPI specification helps parties to unambiguously exchange the 14 message structures, for both SPR and FPR. In addition to the 14 content-based messages, a feedback message has also been realized to respond to the content-based messages.</p> <p>The API acts as a digital gateway, through which the various PUO and asset management parties can receive data. Communication is initiated by the sending party (push-model); the sending party delivers the messages to the receiving party without the latter having to actively request them. The specification begins with general information, stating the name, description, and version of the API.</p> <p>The core of the API describes the specific services that are available. For each service, a clear path is defined where messages can be delivered. This includes, for example, supplying information or performing certain actions. Each path provides a description of what the service does and how it can be used.</p> <p>Please note that in practice, not every party will offer all services from the OAS. For instance, parties that only handle SPR can, in addition to the feedback message, offer the SPR messages 1, 2, 3, and 4.</p> <p>Furthermore, the specification contains reusable building blocks, such as messages and entities. This ensures that the API is consistent and easy to understand and use. The reuse of these messages and entities simplifies development and reduces the chance of errors.</p> <p>To ensure the completeness and integrity of the messages, a mechanism has been introduced that allows for checking for changes during transport. This is the <code>x-jws-signature</code> header, which contains a digital signature of the payload. This provides a reliable basis for parties to trust that received messages exactly match what was sent. The use of this mechanism is an option, not a requirement. Parties can make different choices.</p> <p>Important: The standard only supports the OAS API; other forms of data exchange are not supported. This means that all communication between parties must proceed according to the specified OpenAPI specification, and alternative methods fall outside the scope of the standard.</p> <p>API Security Measures:</p> Security Measure Description Authentication with API key Each request must contain a valid API key in the <code>x-api-key</code> header. OAuth 2.0 Client Credentials Flow The API uses OAuth 2.0. Clients must obtain an access token using their client ID and secret. Specific scopes are used to control access to different API functions. Digital Signatures with x-jws-signature (option) If used, each request contains a digital signature of the payload in the <code>x-jws-signature</code> header to verify message integrity. Encrypted Communication via HTTPS All communication is via HTTPS, ensuring data encryption during transmission."},{"location":"chapter-7-tech-specs/#742-api-implementation-and-backup","title":"7.4.2 API Implementation and Backup","text":"<p>The deployment and operational maintenance of the APIs are the responsibility of the party offering the API and fall outside the scope of this standard. Temporary outages of the API data transport facility may occur. The risk of this is lower with an approach where multiple replicas of the API run simultaneously (on different environments and/or locations). Ultimately, this is a cost-benefit analysis; guaranteeing 99.9% uptime is more expensive than a 98% uptime guarantee.</p> <p>The assumption is that any outage will always be short-lived. In exceptional cases, email can serve as a \"backup\" transport mechanism.</p>"},{"location":"chapter-7-tech-specs/#75-message-composition-versioning-and-publication","title":"7.5 Message Composition, Versioning, and Publication","text":""},{"location":"chapter-7-tech-specs/#751-explanation-of-using-afddefinitionversion","title":"7.5.1 Explanation of using \"afdDefinitionVersion\"","text":"<p><code>afdDefinitionVersion</code> is filled with the version number (from the \"Schema Name\") of the VBPUO JSON schema. The VBPUO JSON schema is maintained by SIVI using \"AFD Online Samenstellen (AOS)\" with the following metadata:</p> AOS Schema Metadata Values (example) SIVI community AFD 2.0 Message Type: Protocol PUO Asset Management Domain: General Schema Name: VBPUO-###.## <p>In the (AOS) VBPUO schema, the 14 VBPUO message structures are defined as \"functions,\" for example, the function: \"Bericht_9.PUO-reconciliatie-informatie(00552b)\". For each \"function,\" three JSON schemas are subsequently generated and published (\"committed\") to GitHub. These JSON schemas serve the following purposes:</p>"},{"location":"chapter-7-tech-specs/#table-2-json-schemas-from-aos-explained","title":"Table 2: JSON Schemas (from AOS) Explained","text":"Purpose Detailed Description Example Filename Message Structure Defines the structure, mandatory elements, and field validations, with internal and external references to ensure data consistency and standardization. <code>VBPUO-001.00-Bericht_1._Vermogen_(0001a).json</code> Code Lists/Tables Defines the code lists (e.g., pension provider and currency codes) used as references in the JSON schema for field validation. <code>VBPUO-001.00-Bericht_1._Vermogen_(0001a)-afdCodelists.json</code> Relational Checks Defines the rules for relational checks within the JSON schema to ensure the validity and consistency of data relationships. <code>VBPUO-001.00-Bericht_1._Vermogen_(0001a)-validationRules.json</code>"},{"location":"chapter-7-tech-specs/#7511-version-number-afddefinitionversion-in-a-github-release","title":"7.5.1.1 Version Number / <code>afdDefinitionVersion</code> in a GitHub release","text":"<p>The version number of an AOS schema must be included in every message that is sent. This number can be found in the Message Structure as a constant under <code>afdDefinitionVersion</code>.</p> <p>The JSON Schemas can be found under this number at https://portal.sivi.org/organisationschemas. The messages created with this schema \u2013 which are defined as functions within the VBPUO schema \u2013 are published on GitHub.</p>"},{"location":"chapter-7-tech-specs/#752-publication-on-github-version-number-and-tag","title":"7.5.2 Publication on GitHub: Version Number and Tag","text":"<p>When releasing on GitHub, the release gets a Name and a Tag (e.g., \"2024_Juli\" with tag <code>v1.1.0</code>). All JSON schemas, example messages, and the OAS fall under that release/tag. The GitHub release name and tag number are not found in the payload of the messages.</p>"},{"location":"chapter-7-tech-specs/#76-processing-protocol-for-partial-messages-chunking","title":"7.6 Processing Protocol for Partial Messages (Chunking)","text":"<p>This section describes the protocol for splitting (by the sender) and processing (by the receiver) of large messages. The use of partial messages (chunks) is an optional mechanism that is applied when the size of a message exceeds the agreed-upon limits.</p>"},{"location":"chapter-7-tech-specs/#761-fundamental-principles-of-chunking","title":"7.6.1 Fundamental Principles of Chunking","text":"<p>Before we describe the splitting and merging process, the following fundamental rules apply to the chunking mechanism:</p> <ul> <li>Validity per Chunk: Each chunk must be a standalone, fully JSON-schema-compliant message. This means that each chunk contains all mandatory \"header\" blocks, such as <code>commonTechnical</code> and <code>commonFunctional</code>.</li> <li>Shared <code>messageId</code>: All chunks that are part of one logical message share the exact same <code>messageId</code> in the <code>commonTechnical</code> block. This is the unique identifier of the overarching, logical message.</li> <li>Mandatory <code>chunkMeta</code> attributes: If the <code>chunkMeta.default</code> entity is present to indicate that chunking is being used, all attributes within this entity are mandatory. This is essential for a robust and deterministic reconstruction process on the receiver's side.</li> <li>Integrity of the logical message: An error in a single chunk (e.g., a validation error or the non-arrival of the chunk) invalidates the entire logical message. The message must then be resubmitted in its entirety, with a new <code>messageId</code>.</li> </ul>"},{"location":"chapter-7-tech-specs/#762-splitting-a-large-message-senders-side","title":"7.6.2 Splitting a Large Message (Sender's Side)","text":""},{"location":"chapter-7-tech-specs/#1-determining-the-necessity","title":"1. Determining the Necessity","text":"<p>Splitting is required when a message exceeds the agreed-upon maximum size (default: 4 MB). The sender is responsible for correctly partitioning the data.</p>"},{"location":"chapter-7-tech-specs/#2-the-splitting-process","title":"2. The Splitting Process","text":"<p>The sender creates multiple chunks by distributing the data from large, repeating arrays (such as a list of cohorts). Each chunk is assigned a <code>chunkMeta</code> block with the appropriate metadata (<code>chunkSequenceNumber</code>, <code>totalNumberOfChunks</code>, etc.) and the <code>chunkFragmentPaths</code> that describe the content of that specific chunk.</p>"},{"location":"chapter-7-tech-specs/#3-use-of-jmespath-in-chunkfragmentpaths","title":"3. Use of JMESPath in <code>chunkFragmentPaths</code>","text":"<p>The <code>chunkFragmentPaths</code> field contains the essential instructions for the receiver to correctly reconstruct the original message. The JMESPath can specify a particular range (slice), for example <code>pension[0:100]</code>, which guarantees that the receiver can place the data back in the exact correct order, even if the chunks are received in a different sequence.</p>"},{"location":"chapter-7-tech-specs/#763-processing-received-chunks-receivers-side","title":"7.6.3 Processing Received Chunks (Receiver's Side)","text":""},{"location":"chapter-7-tech-specs/#1-the-reconstruction-process","title":"1. The Reconstruction Process","text":"<p>The receiver uses the shared <code>messageId</code> to collect the chunks. *   Start with the First Chunk: The chunk with <code>chunkSequenceNumber: 1</code> serves as the base or 'template' for the reconstruction. *   Place Data Fragments: For all subsequent chunks, the data fragments are placed into the correct position within the template, guided by their respective <code>chunkFragmentPaths</code>. *   Determine Completeness: The message is considered complete when the number of received chunks equals the <code>totalNumberOfChunks</code>.</p>"},{"location":"chapter-7-tech-specs/#2-processing-strategies","title":"2. Processing Strategies","text":"<p>Once conceptually complete, the receiver can choose one of the following strategies: *   Reconstruct-first (Batch approach): Build the entire message in memory and then validate it. *   Streaming processing (Direct processing): Save data fragments from each chunk directly and perform overarching validations later on the database.</p>"},{"location":"chapter-7-tech-specs/#3-error-handling-and-incompleteness","title":"3. Error Handling and Incompleteness","text":"<p>The integrity of the complete logical message is crucial.</p> <ul> <li>If a single chunk fails (for example, due to a technical validation error, or if it is not received within a certain timeframe), the entire logical message is considered failed and unprocessable.</li> <li>In such a case, the sender must, after potential consultation, resubmit the entire message with a new <code>messageId</code>, split into a new set of chunks.</li> </ul> &lt; Previous: Chapter 6: Functional Specifications <ul> <li></li> </ul>"}]}